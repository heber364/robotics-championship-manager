generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  email String @unique
  hash  String

  hashRt       String?        @map("hash_rt")
  roles        Role[]
  hashOtpCode  String?        @map("hash_otp_code")
  otpExpiresAt DateTime?      @map("otp_expires_at")
  teams        UsersOnTeams[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String
  scoreRules  String  @map("score_rules")
  arenas      Arena[]
  teams       Team[]

  @@map("categories")
}

model Arena {
  id          Int      @id @default(autoincrement())
  name        String
  youtubeLink String   @map("youtube_link")
  idCategory  Int      @map("id_category")
  category    Category @relation(fields: [idCategory], references: [id])
  Match       Match[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("arenas")
}

model Team {
  id         Int            @id @default(autoincrement())
  name       String
  robotName  String         @map("robot_name")
  idCategory Int            @map("id_category")
  category   Category       @relation(fields: [idCategory], references: [id])
  matchesA   Match[]        @relation("TeamAMatches")
  matchesB   Match[]        @relation("TeamBMatches")
  users      UsersOnTeams[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teams")
}

model Match {
  id          Int          @id @default(autoincrement())
  idTeamA     Int          @map("id_team_a")
  teamA       Team         @relation("TeamAMatches", fields: [idTeamA], references: [id])
  idTeamB     Int          @map("id_team_b")
  teamB       Team         @relation("TeamBMatches", fields: [idTeamB], references: [id])
  idArena     Int          @map("id_arena")
  arena       Arena        @relation(fields: [idArena], references: [id])
  date        DateTime
  status      String
  observation String?
  matchResult MatchResult? @map("match_result")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("matches")
}

enum MatchResult {
  TEAM_A
  TEAM_B
  DRAW
}

model UsersOnTeams {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  idUser Int  @map("id_user")
  user   User @relation(fields: [idUser], references: [id])
  idTeam Int  @map("id_team")
  team   Team @relation(fields: [idTeam], references: [id])

  @@unique([idUser, idTeam])
  @@map("users_on_teams")
}
